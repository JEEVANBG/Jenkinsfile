Docker:
    Docker is a set of platform as a service products that use OS-level virtualization to deliver software in packages called containers.
      
Dockerfile:
    Dockerfile is a text document containing all the commands the user requires to call on the command line to assemble an image. 

Docker Image:
    A Docker image is a file used to execute code in a Docker container. Docker images act as a set of instructions to build a Docker container, like a template.

Docker container:
    A container is an isolated environment for your code. containers have everything that the software needs to run including libraries, system tools, code, and runtime.

Docker network:
    Docker networking enables a user to link a Docker container to as many networks as he/she requires. Docker networking is primarily used to establish communication between Docker containers and the outside world via the host machine where the Docker daemon is running.
    The Docker network is a virtual network created by Docker to enable communication between Docker containers. If two containers are running on the same host they can communicate with each other without the need for ports to be exposed to the host machine.

Types of Network Drivers
    - bridge: If you build a container without specifying the kind of driver, the container will only be created in the bridge network, which is the default network. 
    - host: Containers will not have any IP address they will be directly created in the system network which will remove isolation between the docker host and containers. 
    - none: IP addresses won’t be assigned to containers. These containments are not accessible to us from the outside or from any other container.

Docker volume:
    A Docker volume is an independent file system entirely managed by Docker and exists as a normal file or directory on the host, where data is persisted. 

States of container / Lifecycle of container:
    1. Created - if a container is newly created and the container is not yet started.
    2. Running - A currently running container. It means there is no problem 
                 with the container to run the process.
    3. Exited - A container ran and completed execution with failure.
    4. paused - A container whose process has been paused. (we can unpause the container)
    5. Dead - if the docker daemon tried and failed to stop a container (host ram full)
    6. Restarting - the container will be in the phase of restarting the main process.

Docker Architecture:
Docker Daemon 
    - A background process that manages docker images, containers, network, and volumes.
    - This Daemon constantly listens for docker API requests and processes them.
    
Docker REST API 
    - API which is used by applications to interact with the docker daemon. 
        
Docker CLI 
    - It is a command line interface for interacting with the docker daemon through REST API.
    
Docker Objects 
    - Images, Containers, Networks, Volumes

Benefits of Docker:
    Flexible: Complex applications can be divided and containerized into small components called microservices

    Lightweight: Containers share the machine’s OS system kernel and therefore do not require an OS per application, driving higher server efficiencies and reducing server and licensing costs

    portable:  we can build images anywhere and then deploy them to the cloud, and run them anywhere.    

    Isolation: Docker containers offer a portable, isolated environment for software to execute in, making sure that each container runs without interfering with the operations of other containers or the host system.

    Resource Efficiency: When compared to running separate virtual machines (VMs), containers share the host system's kernel, which lowers overhead. This increases the resource efficiency of Docker and allows for a higher application density on a single host.

    DevOps Integration: Docker supports seamless integration of development and operations (DevOps) workflows. Developers can use the same environment throughout the development and deployment lifecycle, leading to smoother collaboration.

    Continuous Integration and Continuous Deployment (CI/CD): By providing dependable and consistent builds, testing, and deployments, Docker streamlines CI/CD pipelines. Containers are simple to include in CI/CD workflows, resulting in quicker feedback and delivery cycles.

DOCKER COMMANDS
------Docker – Instruction Commands-------
- Docker Run
    This command is used to run a container from an image. The docker run command is a combination of the docker create and docker start commands. It creates a new container from the image specified and starts that container. if the docker image is not present, then the docker run pulls that.

    $ docker run <image_name>
    To give name of container
    $ docker run --name <container_name> <image_name>

- Docker Pull
    This command allows you to pull any image which is present in the official registry of docker, Docker hub. By default, it pulls the latest image, but you can also mention the version of the image.

    $ docker pull <image_name>
    For particular version
    $ docker pull <image_name>:version

- Docker PS
    This command (by default) shows us a list of all the running containers. We can use various flags with it.

    -a flag:  shows us all the containers, stopped or running.
    -l flag: shows us the latest container.
    -q flag: shows only the Id of the containers. 
    $ docker ps [options..]

- Docker Stop
    This command allows you to stop a container if it has crashed or you want to switch to another one.

    $ docker stop <container_ID>

- Docker Start
    Suppose you want to start the stopped container again, you can do it with the help of this command.

    $ docker start <container_ID>

- Docker rm
    To delete a container. By default when a container is created, it gets an ID as well as an imaginary name such as confident_boyd, heuristic_villani, etc. You can either mention the container name or its ID.

    Some important flags:

    -f flag: remove the container forcefully.
    -v flag: remove the volumes.
    -l flag: remove the specific link mentioned.
     $ docker rm {options} <container_name or ID>

- Docker RMI
    To delete the image in docker. You can delete the images which are useless from the docker local storage so you can free up the space

    docker rmi <image ID/ image name>

- Docker Images
    Lists all the pulled images which are present in our system.

    $ docker images

- Docker exec
    This command allows us to run new commands in a running container. This command only works until the container is running, after the container restarts, this command does not restart.

    Some important flags:

    -d flag: for running the commands in the background.
    -i flag: it will keep STDIN open even when not attached.
    -e flag: sets the environment variables 
     $ docker exec {options}

- Docker Ports (Port Mapping)
    In order to access the docker container from the outside world, we have to map the port on our host( Our laptop for example), to the port on the container. This is where port mapping comes into play.

    $ docker run -d -p <port_on_host>:<port_on_container> Container_name

- Docker Push
    docker push <Image name/Image ID> 

- Docker Build
    The docker build command is used to build the docker images with the help of Dockerfile.

    docker build -t image_name:tag .
    In the place of image_name use the name of the image you build with and give the tag number and . “dot” represents the current directory.

- Docker Stop
    You can stop and start the docker containers where you can do the maintenance for containers. To stop and start specific containers you can use the following commands.

    docker stop container_name_or_id

- Stop Multiple Containers
    Instead of stopping a single container. You can stop multiple containers at a time by using the following commands.

    docker stop container1 container2 container3

- Docker Restart
    While running the containers in Docker you may face some errors and containers fails to start. You can restart the containers to resolve the containers by using the following commands.

    docker restart container_name_or_id

- Docker Inspection
    Docker containers will run into some errors in real time to debug the container’s errors you can use the following commands.

    docker inspect container_name_or_id

- Docker Commit commands
    After running the containers by using the current image you can make the updates to the containers by interacting with the containers from that containers you can create an image by using the following commands.

    docker commit container_name_or_id new_image_name:tag

-----Running Commands----

- Method 1: Using Bash
    You can directly access the bash of the Docker Container and execute commands there. It’s very easy to launch the bash of the Container and you can do so using this command.

    sudo docker run -it ubuntu bash
    The above command runs an Ubuntu Container and fires up its bash.

- Method 2: Using the Docker exec Command
    In order to run a command inside a Docker Container using the exec command, you have to know the Container Id of the Docker Container. You can get the Container Id using the following Command.

    sudo docker container ls
            or 
    sudo docker ps -a

    Once you have the Container ID, you can use the Docker exec command. But you have to confirm that the Container is running before you can execute the exec command. To start the Container, use this command.

    sudo docker start d64b00529582
    After that, execute the exec command.

    sudo docker exec -it d64b00529582 echo "GeeksforGeeks"

- Method 3: By using the Dockerfile
    When you are creating a large application, it is always advised that you execute your commands by specifying it inside the Dockerfile. However, you should only include those commands inside the Dockerfile which you want to execute while building the Container. For executing commands on the go, you can use any of the two methods above. To execute commands through Dockerfile, you can specify them using the Docker Run Commands.

    FROM ubuntu:latest
    RUN echo "geeksforgeeks"
    After you have created the above Dockerfile, you can build the images using the Docker build command.

    sudo docker build -t sample-image .

------Docker – USER Instruction------

- Step 1: Create the Dockerfile
    FROM ubuntu:latest
    RUN apt-get -y update
    RUN groupadd -r user && useradd -r -g user user
    USER user

- Step 2: Build the Docker Image
    After creating the Dockerfile, we can now create the Docker Image using the Build command.

    sudo docker build -t user-demo .

- Step 3: Run the Docker Container
    Use the Docker Run command to run the Container.

    sudo docker run -it user-demo bash


