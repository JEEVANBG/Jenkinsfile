Docker:
    Docker is a set of platform as a service products that use OS-level virtualization to deliver software in packages called containers.
      
Dockerfile:
    Dockerfile is a text document containing all the commands the user requires to call on the command line to assemble an image. 

Docker Image:
    A Docker image is a file used to execute code in a Docker container. Docker images act as a set of instructions to build a Docker container, like a template.

Docker container:
    A container is an isolated environment for your code. containers have everything that the software needs to run including libraries, system tools, code, and runtime.

Docker network:
    Docker networking enables a user to link a Docker container to as many networks as he/she requires. Docker networking is primarily used to establish communication between Docker containers and the outside world via the host machine where the Docker daemon is running.
    The Docker network is a virtual network created by Docker to enable communication between Docker containers. If two containers are running on the same host they can communicate with each other without the need for ports to be exposed to the host machine.

Types of Network Drivers
    - bridge: If you build a container without specifying the kind of driver, the container will only be created in the bridge network, which is the default network. 
    - host: Containers will not have any IP address they will be directly created in the system network which will remove isolation between the docker host and containers. 
    - none: IP addresses won’t be assigned to containers. These containments are not accessible to us from the outside or from any other container.

Docker volume:
    A Docker volume is an independent file system entirely managed by Docker and exists as a normal file or directory on the host, where data is persisted. 

States of container / Lifecycle of container:
    1. Created - if a container is newly created and the container is not yet started.
    2. Running - A currently running container. It means there is no problem 
                 with the container to run the process.
    3. Exited - A container ran and completed execution with failure.
    4. paused - A container whose process has been paused. (we can unpause the container)
    5. Dead - if the docker daemon tried and failed to stop a container (host ram full)
    6. Restarting - the container will be in the phase of restarting the main process.

Docker Architecture:
Docker Daemon 
    - A background process that manages docker images, containers, network, and volumes.
    - This Daemon constantly listens for docker API requests and processes them.
    
Docker REST API 
    - API which is used by applications to interact with the docker daemon. 
        
Docker CLI 
    - It is a command line interface for interacting with the docker daemon through REST API.
    
Docker Objects 
    - Images, Containers, Networks, Volumes

Benefits of Docker:
    Flexible: Complex applications can be divided and containerized into small components called microservices

    Lightweight: Containers share the machine’s OS system kernel and therefore do not require an OS per application, driving higher server efficiencies and reducing server and licensing costs

    portable:  we can build images anywhere and then deploy them to the cloud, and run them anywhere.    

    Isolation: Docker containers offer a portable, isolated environment for software to execute in, making sure that each container runs without interfering with the operations of other containers or the host system.

    Resource Efficiency: When compared to running separate virtual machines (VMs), containers share the host system's kernel, which lowers overhead. This increases the resource efficiency of Docker and allows for a higher application density on a single host.

    DevOps Integration: Docker supports seamless integration of development and operations (DevOps) workflows. Developers can use the same environment throughout the development and deployment lifecycle, leading to smoother collaboration.

    Continuous Integration and Continuous Deployment (CI/CD): By providing dependable and consistent builds, testing, and deployments, Docker streamlines CI/CD pipelines. Containers are simple to include in CI/CD workflows, resulting in quicker feedback and delivery cycles.




